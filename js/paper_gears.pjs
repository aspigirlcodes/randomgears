/*******************************************************************************
 *
 * Based on Zack Grossbart's 3 gears: https://github.com/zgrossbart/3gears
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ******************************************************************************/

var speed = 0.75;
var clockwise = false;
var started = true;
var scale = 10;
var toothSize = scale * 2 - 2;
var width = project.view.viewSize.width
var height = project.view.viewSize.height

var gears = [];
var outlines = new CompoundPath();


/**
 * This function initializes our script.
 */
function init() {
    scale = randomInt(10, 20)
    console.log("scale: " + scale)
    toothSize = scale * 2 - 2;
    var p = new Point(0, height / 2);
    var g = new Gear();

    var r0 = 15 * scale / 2.0;
    var outline = new Path.Circle(p, r0 + toothSize);
    //outline.visible = false;
    g.create(p, r0 , randomColor(), speed, !clockwise, outline);         // red gear
    gears.push(g);
    while (g.getPoint().x < width){
      g = addGear(g);            // blue gear
    }

}

function Gear() {
    this.angle = 0.0;
    this.group = new Group();

    this.create = function(/*Point*/ p, /*int*/ r, /*color*/ c, /*int*/ speed, /*boolean*/ clockwise, outline) {
        this.speed = speed;
        this.clockwise = clockwise;
        outlines.addChild(outline);

        var outerCircle = new Path.Circle(p, r);
        outerCircle.fillColor = c;

        var innerCircle = new Path.Circle(p, r/4);
        innerCircle.fillColor = 'white';

        this.group.addChild(this.drawTeeth(r - scale / 3.0, 2.0 * r / scale, c, p));
    }

    this.drawTeeth = function(/*int*/ r, /*int*/ plots, /*color*/ c, /*Point*/ p) {
        var increase = Math.PI * 2 / plots;
        var angle = 0;

        var teeth = new Group();
        this.pos = p;

        var symbol = new Symbol(this.createTooth(c));

        for (var i = 0; i < plots; i++) {
            var t = 2 * Math.PI * i / plots;
            var x = (r + (toothSize / 2)) * Math.cos(t);
            var y = (r + (toothSize / 2)) * Math.sin(t);

            var placed = symbol.place(new Point(p.x + x, p.y + y));

            // 1 radian = 57.2957795 degrees
            placed.rotate(((180 / Math.PI) * angle) + 90);
            teeth.addChild(placed);
            angle += increase;
        }

        this.teethCount = plots;
        return teeth;
    }

    this.createTooth = function(/*color*/ c) {
        var path = new Path();
        path.add(new Point(-(toothSize / 4.0) + 2, -(toothSize / 2.0)));  // upper left
        path.add(new Point((toothSize / 4.0) - 2, -(toothSize / 2.0)));   // upper right

        // Curve down to the bottom right point
        var throughPoint = new Point((toothSize / 4.0), -(toothSize / 2.0) + 4);
        var toPoint = new Point((toothSize / 2.0), (toothSize / 2.0));
        path.arcTo(throughPoint, toPoint);

        path.add(new Point(-(toothSize / 2), (toothSize / 2)));   // bottom left

        // Curve up to the top left point
        throughPoint = new Point(-(toothSize / 4.0) , -(toothSize / 2.0) + 4);
        toPoint = new Point(-(toothSize / 4.0) + 2, -(toothSize / 2.0));
        path.arcTo(throughPoint, toPoint);
        path.closePath();
        path.fillColor = c;

        return path;
    }

    this.getPoint = function() {
        return this.pos;
    }

    this.getToothCount = function() {
        return this.teethCount;
    }

    this.getSpeed = function() {
      return this.speed;
    }

    this.rot = function(/*int*/ angle) {
        this.group.rotate(angle);
        this.angle += angle;
    }

    this.getRot = function() {
        return this.angle;
    }

    this.spin = function() {
        if (this.clockwise) {
            this.group.rotate(this.speed);
        } else {
            this.group.rotate(-this.speed);
        }
    }
}

/**
 * This function helps us with debugging.  We can stop and start
 * the animation whenever the user clicks the mouse.
 */
function onMouseUp(event) {
    started = !started;
}

function addGear(/*Gear*/ gear1) {
    var g2 = randomInt(8,40); // number of teeth
    var color = randomColor();
    var angle = randomInt(-90, 90);

    var r1 = (gear1.getToothCount() * scale) / 2.0;
    var r2 = (g2 * scale) / 2.0;
    var p1 = gear1.getPoint();
    var p2 = new Point(p1.x + ((r1 + r2 + (toothSize - 2)) * Math.cos((angle / 180) * Math.PI)),
                       p1.y + ((r1 + r2 + (toothSize - 2)) * Math.sin((angle / 180) * Math.PI)));

    if (p2.y<0 || p2.y>height){
      return gear1;
    }

    var outline = new Path.Circle(p2, (r2 + toothSize));
    //outline.visible = false;
    if (outline.getIntersections(outlines).length > 2){
      return gear1;
    }

    var speed1 = gear1.getSpeed();
    var speed2 = speed1 * gear1.getToothCount() / g2;

    var gear2 = new Gear();
    gear2.create(p2, r2, color, speed2, clockwise, outline);
    gears.push(gear2);


    /*
     * Now we need to rotate the gears so they match up
     */
    var wedge = 360 / gear1.getToothCount();
    var tooth = Math.floor((angle - gear1.getRot()) / wedge);
    var t = 2 * Math.PI * tooth / gear1.getToothCount();
    var x = Math.round((r1 + (toothSize / 1.85)) * Math.cos(t));
    var y = Math.round((r1 + (toothSize / 1.85)) * Math.sin(t));

    var rad = gear1.getRot() * (Math.PI / 180);
    var x1 = (Math.cos(rad) * x) - (Math.sin(rad) * y);
    var y1 = (Math.cos(rad) * y) + (Math.sin(rad) * x);
    x = x1;
    y = y1;

    var pa1 = new Point(p1.x + x, p1.y + y);

    t = 2 * Math.PI * 0.5 / gear2.getToothCount();
    x = Math.round((r2) * Math.cos(t));
    y = Math.round((r2) * Math.sin(t));
    var pad = new Point(gear2.getPoint().x + x, gear2.getPoint().y + y);

    var pa2 = gear2.getPoint();
    var v = pa1 - pa2;
    var v2 = pad - pa2;

    gear2.rot(v.angle - v2.angle);

    clockwise = !clockwise;
    return gear2;
}

/**
 * This function is called with each frame of the animation.
 */
function onFrame(event) {
    if (started) {
        for (var i = 0; i < gears.length; i++) {
            gears[i].spin();
        }
    }
}

init();
